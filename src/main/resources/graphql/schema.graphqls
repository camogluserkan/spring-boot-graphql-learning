# Only owner of the field or admin can see that field thanks to this new custom directive
# on FIELD_DEFINITION -> this directive can only be placed on fields.
directive @isOwnerOrAdmin on FIELD_DEFINITION

# ------------------------------------------------------------

# ------------------- SCALAR TYPES ---------------------------

# ------------------------------------------------------------

scalar Date


# ------------------------------------------------------------

# ----------------------- ENUMS ------------------------------

# ------------------------------------------------------------
enum StudentStatus {
    ACTIVE,
    GRADUATED,
    ON_LEAVE
}

# for subscription
enum MutationType {
    CREATED
    UPDATED
    DELETED
}
# ------------------------------------------------------------

# -------------------- INTERFACES ----------------------------

# ------------------------------------------------------------


interface Searchable {
    id: ID!
    displayName: String!
}

# ------------------------------------------------------------

# ----------------------- TYPES ------------------------------

# ------------------------------------------------------------
# for Student class
type Student implements Searchable{
    id: ID!
    displayName: String!
    name: String!
    surname: String!
    status: StudentStatus!
}

type Teacher implements Searchable{
    id: ID!
    displayName: String!
    name: String!
}

type Enrollment {
    student: Student!
    course: Course!
    grade: Float! @isOwnerOrAdmin # Use the new custom directive in here
}
#for Course class
type Course implements Searchable{
    id: ID!
    displayName: String!
    name: String!
    teacher: Teacher!
    enrollments: [Enrollment]
    creationDate: Date
}

# event object that we will send in subscription
type CourseEvent {
    mutation: MutationType!
    course: Course!
}
# ------------------------------------------------------------

# ----------------------- INPUTS ------------------------------

# ------------------------------------------------------------
input CreateCourseInput {
    name: String!
    teacherId: ID!
}

input UpdateCourseInput {
    name: String
    teacherId: ID
}
# ------------------------------------------------------------

# ----------------------- QUERIES ------------------------------

# ------------------------------------------------------------
# This section is the "entry point" to our API for reading data.
type Query {
    allCourses: [Course] # Defines a query and it will return a list of `Course` objects.
    courseById(id: ID!): Course # It will iterate and return a `Course`
    search(keyword: String!): [Searchable] # new Query to test interface logic. Return a list of `Searchable`
}
# ------------------------------------------------------------

# ----------------------- MUTATIONS ------------------------------

# ------------------------------------------------------------
type Mutation {
    createCourse(input: CreateCourseInput!): Course
    updateCourse(id: ID!, input: UpdateCourseInput!): Course
    deleteCourse(id: ID!): Course
}
# ------------------------------------------------------------

# ----------------------- SUBSCRIPTIONS ------------------------------

# ------------------------------------------------------------

type Subscription {
    courseEvents: CourseEvent!
}

